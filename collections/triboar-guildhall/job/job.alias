<drac2>
a = argparse(&ARGS&)
ch = character()

# Display help if requested.
if &ARGS& and &ARGS&[0].lower() in ['help', '?']:
    return f'''embed -title "Job Alias Help" -color {color} -desc "Work a job to earn gold!" -f "Usage|`{ctx.prefix}job [skill]`\n\nRoll a skill check to work a job. The better your roll, the more gold you earn!\n\nIf no skill is specified, Perception is used by default." -f "Cooldown|You can only work once per day. Resets at midnight in your timezone (set with `!uvar timezone <UTC_offset>`)." -f "Examples|`{ctx.prefix}job` - Work using Perception\n`{ctx.prefix}job sleight` - Work using Sleight of Hand\n`{ctx.prefix}job investigation` - Work using Investigation" -footer "{ctx.prefix}job help | Triboar Guildhall Collection"'''

# Check daily cooldown (resets at midnight in user's timezone).
timezone_offset = int(get_uvar('timezone', '0'))  # UTC offset in hours
current_time = int(time())
current_day = floor((current_time + timezone_offset * 3600) / 86400)
last_job = int(ch.get_cvar('lastJob', '0'))
last_job_day = floor((last_job + timezone_offset * 3600) / 86400)

if current_day <= last_job_day:
    return f'''embed -title "{name} can't work yet!" -color {color} -thumb {image} -desc "You've already worked today. Come back tomorrow!" -footer "Resets at midnight in your timezone"'''

# Match first argument to a skill, default to perception.
skill = ([x for x, y in ch.skills if '&1&'.lower().replace(' ', '') in x.lower()] + ['perception'])[0]

# Load random job description based on skill (svar overrides gvar).
job_desc_data = get_svar('jobDescriptions', get_gvar('fa47e34f-99b2-4ddf-82a5-302b72010059'))
if job_desc_data:
    job_descriptions = load_json(job_desc_data)
    descriptions = job_descriptions.get(skill, ["worked hard."])
    job_desc = "Today you " + descriptions[randint(len(descriptions))]
else:
    job_desc = "Your job requires skill."

base = f'''embed -title "{name} goes to work!" -color {color} -thumb {image} -desc "{job_desc}"'''

# Perform skill check with character features (rerolls, reliable talent, etc.).
reroll_number = ch.csettings.get("reroll", None)
minimum_check = a.last('mc', None, int) or (10 if ch.csettings.get("talent", False) and ch.skills[skill].prof >= 1 else None)
r = vroll(ch.skills[skill].d20(None, reroll_number, minimum_check))

# Calculate gold earned: (roll_total)d4/2.
g = vroll(f"{r.total}d4/2")

# Add earned gold to coin purse via baglib.
using(baglib='5f1ffcbf-3f59-4396-b402-1ca0f02d6bbb')
loaded_bags = baglib.LoadedBags()
loaded_bags.modify_coins(coin="gp", quantity=g.total)
loaded_bags.save_bags()

# Update cooldown timestamp.
ch.set_cvar('lastJob', str(current_time))

# Build embed with skill roll result, earnings, and updated coin purse.
coin_display = ' '.join(loaded_bags.display_coins(compact=True))
base += f''' -f "Your {skill.replace('H', ' h').replace('O', ' o')} roll:|{r}"'''
base += f''' -f "You earned:|**{g.total}gp**"'''
base += f''' {coin_display}'''
base += f''' -footer "{ctx.prefix}job help | Triboar Guildhall Collection"'''

return base

</drac2>