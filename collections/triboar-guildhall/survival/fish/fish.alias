<drac2>

# Setup the embed
base = f'''embed -title "{name} goes fishing!" -color {color} -thumb {image} -desc "Fishing is a complicated process. You need to find a good spot (nature), choose the right bait, hook a fish and bring it in (survival), then gut and clean the fish to harvest the meat (survival)."'''

# Load data and seed variables
c = character()
cs = character().skills
rr_num = c.csettings.get("reroll", None)
min_harvest = 1
harv_mod = False
harv_mult = 1
nl = "\n"
backfeat = get("backgroundFeature", "")
args = &ARGS&
if "harvest the water" in backfeat.lower():
	args.append('cadv')
parse = argparse(args)
percentile_species = vroll('1d100')
loot_added = False
misc_bonus = ""
find_bonus = ""
catch_bonus = ""
harv_bonus = ""

# Check channel restrictions
allowed_channels = get_svar("FishChannels", "")
if allowed_channels:
	channel_list = [ch.strip() for ch in allowed_channels.split(",")]
	if str(ctx.channel.id) not in channel_list:
		channel_mentions = " ".join([f"<#{ch_id}>" for ch_id in channel_list])
		return f'''embed -title "You can't fish here!" -color {color} -desc "This water isn't safe for fishing. Try fishing in: {channel_mentions}" -footer "{ctx.prefix}survival fish help | Triboar Guildhall Collection"'''

# Check cooldown (global for all survival activities)
cooldown_minutes = float(get_svar("SurvivalCooldown", "60"))
cooldown_seconds = cooldown_minutes * 60
last_survival = c.get_cvar("lastSurvival", "0")
current_time = time()
time_since_last = current_time - float(last_survival)

if time_since_last < cooldown_seconds:
	time_remaining = cooldown_seconds - time_since_last
	hours = int(time_remaining // 3600)
	minutes = int((time_remaining % 3600) // 60)
	seconds = int(time_remaining % 60)
	time_str = f"{hours}h {minutes}m {seconds}s" if hours > 0 else f"{minutes}m {seconds}s" if minutes > 0 else f"{seconds}s"
	return f'''embed -title "You're too tired!" -color {color} -desc "You need to rest before attempting another survival activity. You can try again in **{time_str}**." -footer "{ctx.prefix}survival fish help | Triboar Guildhall Collection"'''

# Setup error based on args
if len(args) == 0:
	err(f'''You must provide an argument for the type of fishing you want to do, core arguments include `river`, `lake`, and `sea`. Your server may have additional options, contact your bot gurus for details''')


# Load svars
dataSelect = load_json(get_svar("FishArgs", "{}"))
dataSelect.update({'river': 'FishSpeciesRiver', 'lake': 'FishSpeciesLake', 'sea': 'FishSpeciesSea'})
svarName = dataSelect.get(args[0])
fishdata = []

defaultData = {'FishSpeciesRiver': '[{"species": "Bluegill", "weight": 3, "percent": 0, "DC": 10}, {"species": "Trout (Rainbow/Brook)", "weight": 6, "percent": 25, "DC": 12}, {"species": "Catfish", "weight": 12, "percent": 50, "DC": 13}, {"species": "Pike", "weight": 20, "percent": 65, "DC": 14}, {"species": "Sturgeon", "weight": 30, "percent": 85, "DC": 15}]', 'FishSpeciesLake': '[{"species": "Perch", "weight": 3, "percent": 0, "DC": 10}, {"species": "Bass (Largemouth/Smallmouth)", "weight": 9, "percent": 25, "DC": 12}, {"species": "Walleye", "weight": 12, "percent": 50, "DC": 13}, {"species": "Muskellunge (Muskie)", "weight": 24, "percent": 65, "DC": 14}, {"species": "Lake Trout", "weight": 30, "percent": 85, "DC": 15}]', 'FishSpeciesSea': '[{"species": "Mackerel", "weight": 6, "percent": 0, "DC": 10}, {"species": "Snapper (Red/Yellowtail)", "weight": 12, "percent": 25, "DC": 12}, {"species": "Tuna (Skipjack/Albacore)", "weight": 18, "percent": 50, "DC": 13}, {"species": "Marlin (Blue/Black/Striped)", "weight": 24, "percent": 65, "DC": 14}, {"species": "Swordfish", "weight": 30, "percent": 85, "DC": 15}]'}

if len(dataSelect) > 0:
	if args[0] in dataSelect.keys():
		fishdata = load_json(get_svar(svarName, defaultData.get(svarName)).replace("species","s").replace("weight","w").replace("percent","p").replace("DC","d").replace("info","i").replace("meat","m"))

settings = load_json(get_svar("SurvSettings", '{"fishFind": [10,50,80,95], "fishHarvDC": 20, "huntFind": [10,45,75,90], "huntHarvDC": 22, "foraFind": [15,40,85,90], "foraHarvDC": 17, "harvest": true, "cooldown": false, "coolTime": 0, "fishCool": false, "fishCoolTime": 0, "huntCool": false, "huntCoolTime": 0, "forageCool": false, "forageCoolTime": 0}'))

if not settings.get('coolType'):
	settings.update({"coolType": "blank"})

dc_percent_list = settings.get("fishFind")
max_DC = settings.get("fishHarvDC")

# Error on empty fishdata
if len(fishdata) == 0 or len(fishdata[0]) == 0:
	err(f'''Seems like your server's bot gurus have disabled fishing or you have used an invalid argument. Please contact them to correct this. They can check `{ctx.prefix}svar FishSpecies` and/or `{ctx.prefix}svar FishArgs` to fix it.''')

# Setup bonuses from args
bonus = parse.get('b')
fbonus = parse.get('fb')
cbonus = parse.get('cb')
hbonus = parse.get('hb')
if "-b" in args:
	misc_bonus += f'+{bonus[0]}'
if "-fb" in args:
	find_bonus += f'+{fbonus[0]}'
if "-cb" in args:
	catch_bonus += f'+{cbonus[0]}'
if "-hb" in args:
	harv_bonus += f'+{hbonus[0]}'

# Setup advantage boolwise logic
advbase = parse.adv(boolwise=True)
far = parse.adv(custom={'adv': 'fadv', 'dis': 'fdis'}, boolwise=True)
car = parse.adv(custom={'adv': 'cadv', 'dis': 'cdis'}, boolwise=True)
har = parse.adv(custom={'adv': 'hadv', 'dis': 'hdis'}, boolwise=True)
if far == None and advbase != None:
	far = advbase
if car == None and advbase != None:
	car = advbase
if har == None and advbase != None:
	har = advbase
if far == True and advbase != None:
	if advbase == False:
		far = None
	else:
		far = far
if far == False and advbase != None:
	if advbase == True:
		far = None
	else:
		far = far
if car == True and advbase != None:
	if advbase == False:
		car = None
	else:
		car = car
if car == False and advbase != None:
	if advbase == True:
		car = None
	else:
		car = car
if har == True and advbase != None:
	if advbase == False:
		har = None
	else:
		har = har
if har == False and advbase != None:
	if advbase == True:
		har = None
	else:
		har = har

# Setup settings for automatic harvesting
harv_setting = load_json(get("fishSurvHarvesting", "true").lower())
if harv_setting is False or settings.get('harvest') is False:
	harvesting = False
else:
	harvesting = True

# Help setup
help = f'''help {ctx.alias} -here'''
if len(args) == 1 and args[0].lower() in '?help':
	return help

# Establish DC to find fish
if "lake" in args:
	find_dc = 10
elif "river" in args:
	find_dc = 12
elif "sea" in args:
	find_dc = 15
## We don't know.
else:
	find_dc = 15

# Figure out which fish is being fished for
index = 0
specific_species = []
for i,j in enumerate(fishdata):
	cur_species = fishdata[i].get('s')
	for arg in args:
		if (arg.lower() in cur_species.lower()) and (cur_species not in specific_species):
			specific_species.append(cur_species)
	if percentile_species.total > fishdata[i].get('p'):
		index += 1
index -= 1

# Load the data for that particular fish
catch_dc = fishdata[index].get('d')
species = fishdata[index].get('s')
max_weight = fishdata[index].get('w')
information = fishdata[index].get('i')
meat_replace = fishdata[index].get('m')

# Handling of specific species
targeted = None
if len(specific_species) > 0 and species in specific_species:
	targeted = True
elif len(specific_species) > 0 and species not in specific_species:
	targeted = False

# Roll the Nature check to find a good spot
fab = cs.nature
fskill = "Nature"
fmc = (10 if c.csettings.get("talent", False) and fab.prof else None)
find_string = fab.d20(far, rr_num, fmc) + ("+1d4[guidance]" if parse.get("guidance") else "") + misc_bonus + find_bonus
find_check = vroll(find_string)

# Establish the Survival catch check
cab = cs.survival
cskill = "Survival"
cmc = (10 if c.csettings.get("talent", False) and cab.prof else None)
catch_string = cab.d20(car, rr_num, cmc) + ("+1d4[guidance]" if parse.get("guidance") else "") + misc_bonus + catch_bonus
catch_check = vroll(catch_string)

# Establish the harvest check
hab = cs.survival
hskill = "Survival"
hmc = (10 if c.csettings.get("talent", False) and hab.prof else None)
harvest_string = hab.d20(har, rr_num, hmc) + ("+1d4[guidance]" if parse.get("guidance") else "") + misc_bonus + harv_bonus
harvest_check = vroll(harvest_string)


# Process the harvest check, even if things weren't caught
if "harvest the water" in backfeat.lower():
	min_harvest = min(max_weight,11)
	harv_mod = True
elif "wanderer" == backfeat.lower():
	min_harvest = min(max_weight, 6)
	harv_mod = True
harv_percent = min(floor(harvest_check.total/max_DC*100),100)
harvest = max(floor(harv_percent/100*max_weight),min_harvest)

# Find a good spot (or not), catch it (or not), harvest it and add to bag (or not)
if find_check.total >= find_dc:
	base += f''' -f "You found a good fishing spot!|**DC {find_dc}**{nl}**{fskill}:** {find_check}{nl}You {'are fishing for' if specific_species else 'end up hooking'}: **{'** or **'.join(specific_species) if specific_species else species}**{nl+information if information else ''}"'''
	deposit = meat_replace if meat_replace else species
	if catch_check.total >= catch_dc:
		base += f''' -f "You caught a fish!|**DC {catch_dc}**{nl}**{cskill}:** {catch_check}{nl+'**Species:** '+species if specific_species else ''}{nl+'*Fisher Background: automatically applied `cadv`*' if 'harvest the water' in backfeat.lower() else ''}"'''
		if harvesting and (targeted == True or targeted == None):
			dumb = '\*'
			base += f''' -f "Time to clean your catch|**DC {max_DC}** (for 100%){nl}**Max Weight:** {max_weight} lbs.{nl}**{hskill}:** {harvest_check}/{max_DC}{dumb+str(harv_mult) if harv_mult>1 else ''}\*100 = **{harv_percent}%** (max 100){nl}You harvested: **{harvest}** lbs. of **{deposit}**{nl+'*Background or class feature affected harvest math*' if harv_mod or harv_mult>1 else ''}"'''
			base += f''' -footer "{ctx.prefix}survival fish help | Triboar Guildhall Collection"'''
			c.set_cvar("lastSurvival", str(current_time))
		elif harvesting and targeted == False:
			base += f''' -f "Catch and Release|You wanted to catch a **{'** or **'.join(specific_species)}** but caught **{species}** instead, so you threw it back."'''
			base += f''' -footer "{ctx.prefix}survival fish help | Triboar Guildhall Collection"'''
		else:
			base += f''' -f "Catch and Release|You're a good person. Thank you for not overfishing."'''
			base += f''' -footer "{ctx.prefix}survival fish help | Triboar Guildhall Collection"'''
	else:
		base += f''' -f "Your fish got away!|**DC {catch_dc}**{nl}**{cskill}:** {catch_check}"'''
		base += f''' -footer "{ctx.prefix}survival fish help | Triboar Guildhall Collection"'''
elif find_dc >= 60 and find_check.total < find_dc:
	base += f''' -f "There was nothing here!|**DC {find_dc}**{nl}**{fskill}:** {find_check}"'''
else:
	base += f''' -f "You couldn't find anything!|**DC {find_dc}**{nl}**{fskill}:** {find_check}"'''
	base += f''' -footer "{ctx.prefix}survival fish help | Triboar Guildhall Collection"'''
return base
</drac2>